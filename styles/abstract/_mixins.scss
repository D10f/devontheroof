@use "sass:map";
@use "sass:meta";
@use "sass:math";
@use "sass:string";
@use "sass:list";
@use "variables" as *;

/**
 *  Positions an element as absolute or relative based on $position argument.
 */
@mixin position(
  $top: null,
  $right: null,
  $bottom: null,
  $left: null,
  $position: "absolute"
) {
  @if ($position == "absolute") {
    @extend %position-absolute;
  } @else if ($position == "relative") {
    @extend %position-relative;
  } @else {
    @error 'ERROR: Invalid position argument provided.';
  }

  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

/**
 *  Makes the element a flex container
 */
@mixin flex($dir: row, $x: center, $y: center, $gap: 0) {
  @extend %display-as-flex;
  flex-direction: $dir;
  gap: $gap;

  @if ($dir == "column") {
    $_tmp: $x;
    $x: $y;
    $y: $x;
  }

  justify-content: $x;
  align-items: $y;
}

/**
 *  Truncates an element to a specific width. Repalces wrapping with ellipsis
 */
@mixin truncate($length: 80ch, $ellipsis: true) {
  @extend %no-overflow;
  max-width: $length;
  white-space: nowrap;

  @if ($ellipsis) {
    text-overflow: ellipsis;
  }
}

/**
 *  Determins the width and height of an element
 */
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

/**
 *  Creates a pseudo element with an arrow, useful for tooltips
 */
@mixin arrow($position: "top", $color: currentColor, $size: 0.5em) {
  @include position("relative");
  filter: drop-shadow(0 0 $size rgba(0 0 0 / 0.4));

  // &::before {
  &::after {
    $_positions: ("top", "right", "bottom", "left");
    $_parsed-positions: ();
    $_position-reference: (
      "top": "bottom",
      "right": "left",
      "bottom": "top",
      "left": "right",
    );

    // Parse the $position string into up to 2 arguments
    $_separate-at: string.index($position, " ");
    $_first: null;
    $_second: null;

    @if ($_separate-at) {
      $_first: string.slice($position, 1, $_separate-at - 1);
      $_second: string.slice($position, $_separate-at + 1);
    } @else {
      $_first: $position;
    }

    // Validate arguments as valid positions
    @if ($_first == $_second) {
      @error 'ERROR: position arguments cannot be the same on both axis.';
    }

    @if (
      not
        list.index($_positions, $_first) or
        ($_second and not list.index($_positions, $_second))
    ) {
      @error 'ERROR: position arguments are invalid.';
    }

    $_opposite-direction: null;
    @each $_pos in $_positions {
      border-#{$_pos}: $size solid transparent;

      @if ($_first == $_pos) {
        $_parsed-positions: list.append($_parsed-positions, -$size);
        $_opposite-direction: map.get($_position-reference, $_first);
      } @else if ($_second == $_pos) {
        $_parsed-positions: list.append($_parsed-positions, 0);
      } @else {
        $_parsed-positions: list.append($_parsed-positions, null);
      }
    }
    border-#{$_opposite-direction}: $size solid $color;
    border-#{$_first}: unset;

    @if (not $_second) {
      @if ($_first == "top" or $_first == "bottom") {
        $_parsed-positions: list.set-nth($_parsed-positions, 2, 50%);
        transform: translateX(50%);
      } @else {
        $_parsed-positions: list.set-nth($_parsed-positions, 1, 50%);
        transform: translateY(-50%);
      }
    }

    @extend %no-content;
    @include size(0);
    @include position($position: "absolute", $_parsed-positions...);
  }
}

/**
 *  Applies styles on dark mode including using css classes as well as media queries
 */
@mixin dark-mode {
  body.dark & {
    @content;
  }
}

/**
*  MEDIA QUERY REFERENCE
*  | Breakpoint     | Pixels |  Em   |
*  |----------------|--------|-------|
*  | Narrow         | < 400  | 25    |
*  | Phone          | < 600  | 37.5  |
*  | tablet         | < 768  | 48    |
*  | Portrait       | < 900  | 56.25 |
*  | Landscape      | < 1200 | 75    |
*  | Desktop        | < 1800 | 112.5 |
*  | Big Desktop    | > 1800 | 112.5 |
*/

@mixin responsive($breakpoint) {
  @if $breakpoint == narrow {
    @media only screen and (max-width: 25em) {
      @content;
    }
  }
  @if $breakpoint == phone {
    @media only screen and (max-width: 37.5em) {
      @content;
    }
  }
  @if $breakpoint == tablet {
    @media only screen and (max-width: 48em) {
      @content;
    }
  }
  @if $breakpoint == portrait {
    @media only screen and (max-width: 56.25em) {
      @content;
    }
  }
  @if $breakpoint == landscape {
    @media only screen and (max-width: 75em) {
      @content;
    }
  }
  @if $breakpoint == widescreen {
    @media only screen and (min-width: 112.5em) {
      @content;
    }
  }
}

@mixin contain {
  max-width: $max-width;
  margin: 0 auto;
}

@mixin debugger($color: coral) {
  border: 1px solid $color;
}
